const express = require('express');
const cors = require('cors');
const path = require('path');
const { MongoClient } = require('mongodb');
const fetch = require('node-fetch');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// MongoDB
const MONGO_URI = 'mongodb+srv://danilkrauyshin2:Squizyzerofox1221.@dps-cluster.wj56qe5.mongodb.net/?retryWrites=true&w=majority&appName=DPS-Cluster';
const client = new MongoClient(MONGO_URI);
let markersCollection;
let actionsCollection;  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ IP

app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await client.connect();
    const db = client.db('dps-map');
    markersCollection = db.collection('markers');
    actionsCollection = db.collection('actions'); // –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ IP –∏ –¥–µ–π—Å—Ç–≤–∏—é
    await actionsCollection.createIndex({ ip: 1, action: 1 }, { unique: true });

    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    process.exit(1);
  }
}

startServer();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
async function getAddress(lat, lng) {
  const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`;
  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'DPS-Map-App/1.0 (valerka.korsh@gmail.com)',
        'Accept-Language': 'ru',
      },
    });
    const data = await response.json();

    if (!data.address) return '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';

    const { house_number, road, suburb, neighbourhood, city, town } = data.address;

    return [
      house_number,
      road,
      suburb || neighbourhood,
      city || town
    ].filter(Boolean).join(', ');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
    return '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP –∏ –¥–µ–π—Å—Ç–≤–∏—é (add –∏–ª–∏ delete)
async function checkRateLimit(ip, action) {
  const now = Date.now();
  const limitMs = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ –¥–µ–π—Å—Ç–≤–∏–∏ —ç—Ç–æ–≥–æ IP
  const record = await actionsCollection.findOne({ ip, action });

  if (record && now - record.timestamp < limitMs) {
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
    return false;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  await actionsCollection.updateOne(
    { ip, action },
    { $set: { timestamp: now } },
    { upsert: true }
  );

  return true;
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
setInterval(async () => {
  const now = Date.now();
  const allMarkers = await markersCollection.find().toArray();

  for (const marker of allMarkers) {
    const age = now - marker.timestamp;
    let updateNeeded = false;

    if (marker.status === 'active' && age > 60 * 60 * 1000) {
      await markersCollection.updateOne({ id: marker.id }, { $set: { status: 'stale' } });
      updateNeeded = true;
    }

    if (marker.status === 'stale' && age > 80 * 60 * 1000) {
      await markersCollection.deleteOne({ id: marker.id });
      updateNeeded = true;
    }

    if (updateNeeded) {
      console.log(`üïí –û–±–Ω–æ–≤–ª–µ–Ω–∞/—É–¥–∞–ª–µ–Ω–∞ –º–µ—Ç–∫–∞ ${marker.id}`);
    }
  }
}, 30 * 1000);

// API: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç–∫–∏
app.get('/markers', async (req, res) => {
  const allMarkers = await markersCollection.find().toArray();
  res.json(allMarkers);
});

// API: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É
app.post('/markers', async (req, res) => {
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  
  const allowed = await checkRateLimit(ip, 'add');
  if (!allowed) {
    return res.status(429).json({ error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }

  let { lat, lng, comment } = req.body;
  if (!comment || comment.trim() === '') comment = '-';

  const id = Date.now();
  const address = await getAddress(lat, lng);

  const marker = {
    id,
    lat,
    lng,
    timestamp: Date.now(),
    status: 'active',
    confirmations: 0,
    address,
    comment,
  };

  await markersCollection.insertOne(marker);
  res.json(marker);
});

// API: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Ç–∫–∏ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
app.post('/markers/:id/confirm', async (req, res) => {
  const id = Number(req.params.id);
  const marker = await markersCollection.findOne({ id });

  if (!marker) return res.sendStatus(404);

  await markersCollection.updateOne(
    { id },
    {
      $set: {
        status: 'active',
        timestamp: Date.now(),
      },
      $inc: { confirmations: 1 },
    }
  );

  res.sendStatus(200);
});

// API: –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
app.post('/markers/:id/delete', async (req, res) => {
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  
  const allowed = await checkRateLimit(ip, 'delete');
  if (!allowed) {
    return res.status(429).json({ error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }

  const id = Number(req.params.id);
  const result = await markersCollection.deleteOne({ id });

  if (result.deletedCount > 0) {
    res.sendStatus(200);
  } else {
    res.sendStatus(404);
  }
});

// –û—Ç–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
app.use(express.static(path.join(__dirname, '../build')));
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../build/index.html'));
});
